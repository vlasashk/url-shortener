linters:
  enable:
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unused # checks for unused constants, variables, functions and types
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - exportloopref # checks for pointers to enclosing loop variables
    - gosimple # specializes in simplifying a code
    - ineffassign # detects when assignments to existing variables are not used
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers.
    - bidichk # checks for dangerous unicode character sequences
    - exhaustive # checks exhaustiveness of enum switch statements
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil # Checks that there is no simultaneous return of nil error and an invalid value.
    - nolintlint # Reports ill-formed or insufficient nolint directives.
    - zerologlint # Detects the wrong usage of zerolog that a user forgets to dispatch with Send or Msg.
    - stylecheck
    - unconvert
    - unparam
    - unused
    - goconst
    - gocritic
    - gocyclo
    - govet
    - prealloc

linters-settings:
  gocyclo:
    min-complexity: 20
  gocognit:
    min-complexity: 10
  dupl:
    threshold: 200
  nakedret:
    max-func-lines: 50
  funlen:
    lines: 80
    statements: 50
  errcheck:
    check-type-assertions: true
    check-blank: true
  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map
    default-signifies-exhaustive: true
    explicit-exhaustive-map: true
  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [funlen, gocognit, lll]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: false
  revive:
    ignore-generated-header: true
    # https://github.com/mgechev/revive#recommended-configuration
    rules:
      - name: atomic
        disabled: false
      - name: time-equal
        disabled: false
      - name: errorf
        disabled: false
      - name: context-as-argument
        disabled: false
      - name: context-keys-type
        disabled: false
      - name: blank-imports
        disabled: false
      - name: dot-imports
        disabled: false
      - name: error-return
        disabled: false
      - name: error-strings
        disabled: false
      - name: if-return
        disabled: false
      - name: increment-decrement
        disabled: false
      - name: var-declaration
        disabled: false
      - name: range
        disabled: false
      - name: indent-error-flow
        disabled: false
      - name: superfluous-else
        disabled: false
      - name: empty-block
        disabled: false
      - name: unused-parameter
        disabled: false
      - name: defer
        disabled: false
run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
output:
  # Sort results by: filepath, line and column.
  sort-results: true
issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
