services:
  shortener_db:
    image: postgres:latest
    user: postgres
    restart: always
    networks:
      - backend
    env_file:
      - ./config/docker.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - shortener_data:/var/lib/postgresql/shortener_data
  app:
    build:
      context: .
      dockerfile: cmd/shortener/Dockerfile
    restart: always
    ports:
      - "9090:9090"
    env_file:
      - ./config/docker.env
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "app:9090/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      start_interval: 3s
    depends_on:
      shortener_db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - backend

  cronjob:
    build:
      context: .
      dockerfile: cmd/cronjob/Dockerfile
    restart: always
    env_file:
      - ./config/docker.env
    depends_on:
      shortener_db:
        condition: service_healthy
    networks:
      - backend

  migration:
    container_name: migration
    image: alpine/curl:latest
    depends_on:
      shortener_db:
        condition: service_healthy
    env_file:
      - ./config/docker.env
    volumes:
      - ./migrations:/migrations
    entrypoint:
      - /bin/sh
      - -c
      - |
        curl -fsSL https://raw.githubusercontent.com/pressly/goose/master/install.sh | sh && 
        goose -dir=/migrations postgres "postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@$${POSTGRES_HOST}/$${POSTGRES_DB}?sslmode=disable" up
    networks:
      - backend

volumes:
  shortener_data:

networks:
  backend:
    driver: bridge